# SPDX-FileCopyrightText: 2009 Fermi Research Alliance, LLC
# SPDX-License-Identifier: Apache-2.0

######################################################################
##
##  condor_config.check.include
##
##  Condor include file for testing purposes
##
######################################################################

WORK_DIR=$(LOCAL_DIR)

# No need to be nice... I got the slot
JOB_RENICE_INCREMENT = 0

# force a single CPU (the WN could have many)
NUM_CPUS = 1
SLOT_TYPE_1 = cpus=1, memory=100%, swap=100%, disk=100%
NUM_SLOTS_TYPE_1 = 1

HAS_MONITOR_VM=False
IS_MONITOR_VM = False
USES_MONITOR_STARTD = True

STARTD_ATTRS = $(STARTD_ATTRS), IS_MONITOR_VM, HAS_MONITOR_VM, USES_MONITOR_STARTD, Monitoring_Name

# don't start any jobs
START=False
WANT_HOLD=False
PREEMPT=False

IsOwner = False

# Max time a job is guaranteed to run in the glidein
# set it to several months... i.e. infinity
MaxJobRetirementTime=10000000
# How long does the job have after the startd enters retiring state
SHUTDOWN_GRACEFUL_TIMEOUT=$(GLIDEIN_Job_Max_Time)

# How long will it wait in an unclaimed state before exiting
STARTD_NOCLAIM_SHUTDOWN = $(GLIDEIN_Max_Idle)

# Set to shutdown if total idle exceeds max idle, or if the age
# exceeds the retire time (and is idle) or is over the max walltime (todie)

DS_TO_DIE = ((GLIDEIN_ToDie =!= UNDEFINED) && (CurrentTime > GLIDEIN_ToDie))


# The condition pre 8.2 is valid only for not partitionable slots
# Since the idle timer doesn't reset/stop when resources are reclaimed,
# partitionable slots will get reaped sooner than non-partitionable.
DS${I}_NOT_PARTITIONABLE = ((PartitionableSlot =!= True) || (TotalSlots =?=1))
# The daemon shutdown expression for idle startds(glideins) depends on some conditions:
# If some jobs were scheduled on the startd (JOB) or none at all (NOJOB)
# If using condor 8.2 or later (NEW) or previous versions (PRE82). JobStarts defined
# is used to discriminate
DS${I}_IS_HCCONDOR_NEW = (Slot${I}_JobStarts =!= UNDEFINED)
# No jobs started (using GLIDEIN_Max_Idle)


# The condition pre 8.2 is valid only for not partitionable slots
# Since the idle timer doesn't reset/stop when resources are reclaimed,
# partitionable slots will get reaped sooner than non-partitionable.
DS_NOT_PARTITIONABLE = ((PartitionableSlot =!= True) || (TotalSlots =?=1))
# The daemon shutdown expression for idle startds(glideins) depends on some conditions:
# If some jobs were scheduled on the startd (TAIL) or none at all (NOJOB)
# If using condor 8.2 or later (NEW) or previous versions (PRE82). JobStarts defined
# is used to discriminate
DS_IS_HTCONDOR_NEW = (JobStarts =!= UNDEFINED)
# No jobs started (using GLIDEIN_Max_Idle)
DS_IDLE_NOJOB_NEW = ((JobStarts =!= UNDEFINED) && (SelfMonitorAge =!= UNDEFINED) && (GLIDEIN_Max_Idle =!= UNDEFINED) && \
                  (JobStarts == 0) && \
                  (SelfMonitorAge > GLIDEIN_Max_Idle))
DS_IDLE_NOJOB_PRE82 = ((TotalTimeUnclaimedIdle =!= UNDEFINED) && (GLIDEIN_Max_Idle =!= UNDEFINED) && \
        $(DS_NOT_PARTITIONABLE) && \
        (TotalTimeUnclaimedIdle > GLIDEIN_Max_Idle))
DS_IDLE_NOJOB = ((GLIDEIN_Max_Idle =!= UNDEFINED) && \
        ifThenElse($(DS_IS_HTCONDOR_NEW), $(DS_IDLE_NOJOB_NEW), $(DS_IDLE_NOJOB_PRE82)))
# Some jobs started (using GLIDEIN_Max_Tail)
DS_IDLE_TAIL_NEW = ((JobStarts =!= UNDEFINED) && (ExpectedMachineGracefulDrainingCompletion =!= UNDEFINED) && (GLIDEIN_Max_Tail =!= UNDEFINED) && \
        (JobStarts > 0) && \
        ((CurrentTime - ExpectedMachineGracefulDrainingCompletion) > GLIDEIN_Max_Tail) )
DS_IDLE_TAIL_PRE82 = ((TotalTimeUnclaimedIdle =!= UNDEFINED) && (GLIDEIN_Max_Tail =!= UNDEFINED) && \
        (TotalTimeClaimedBusy =!= UNDEFINED) && \
        $(DS_NOT_PARTITIONABLE) && \
        (TotalTimeUnclaimedIdle > GLIDEIN_Max_Tail))
DS_IDLE_TAIL = ((GLIDEIN_Max_Tail =!= UNDEFINED) && \
        ifThenElse($(DS_IS_HTCONDOR_NEW), $(DS_IDLE_TAIL_NEW), $(DS_IDLE_TAIL_PRE82)))
DS_IDLE_RETIRE = ((GLIDEIN_ToRetire =!= UNDEFINED) && \
       (CurrentTime > GLIDEIN_ToRetire ))
DS_IDLE = ( (Activity == "Idle") && \
        ($(DS_IDLE_NOJOB) || $(DS_IDLE_TAIL) || $(DS_IDLE_RETIRE)) )

DS = ($(DS_TO_DIE) || $(DS_IDLE))

STARTD.DAEMON_SHUTDOWN = $(DS_TO_DIE) || \
         ($(DS_IDLE))
#
# Shutdown the master if the startd exits.  Note that if
# STARTD_StartTime is zero, that the startd is not currently running.
#
MASTER.DAEMON_SHUTDOWN = (STARTD_StartTime =?= 0)
