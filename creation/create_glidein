#!/usr/bin/env python

#
# Project:
#   glideinWMS
#
# File Version: 
#
# Description:
#  This program creates a glidein factory directory structure
#  based on a configuration file
#

import os
import sys
import string
import traceback

STARTUP_DIR = sys.path[0]
sys.path.append(os.path.join(STARTUP_DIR,"../.."))

from glideinwms.creation.lib import cgWParams
from glideinwms.creation.lib import cgWDictFile
from glideinwms.creation.lib import cgWConsts,cWConsts
from glideinwms.creation.lib import cgWCreate
from glideinwms.creation.lib import cgWParamDict
from glideinwms.creation.lib import factoryXmlConfig

################################################################################

def main(conf):
    #print params.__dict__
    glidein_dicts_obj = cgWParamDict.glideinDicts(conf)

    try:
        glidein_dicts_obj.populate()
    except cgWParamDict.UnconfiguredScheddError, e:
        print e.err_str
        sys.exit(1)

    glidein_dicts_obj.create_dirs()
    try:
        # save files in dictionaries
        glidein_dicts_obj.save()
        glidein_dicts_obj.set_readonly(True)

        # copy the submit files
        cgWCreate.copy_exe(cgWConsts.STARTUP_FILE, glidein_dicts_obj.main_dicts.work_dir, cgWConsts.WEB_BASE_DIR)
        cgWCreate.copy_exe(cgWConsts.LOCAL_START_WRAPPER, glidein_dicts_obj.main_dicts.work_dir, cgWConsts.WEB_BASE_DIR)

        # copy glidein_startup.sh to the stage area for cloud entries
        cgWCreate.copy_exe(cgWConsts.STARTUP_FILE, glidein_dicts_obj.main_dicts.stage_dir, cgWConsts.WEB_BASE_DIR)

        # copy privsep helper executables
        cgWCreate.copy_exe(cgWConsts.UPDATE_PROXY_FILE, glidein_dicts_obj.main_dicts.work_dir, cgWConsts.WEB_BASE_DIR)

        # create the init.d startup file
        cgWCreate.create_initd_startup(os.path.join(glidein_dicts_obj.main_dicts.work_dir, cgWConsts.INITD_STARTUP_FILE),
                                       glidein_dicts_obj.main_dicts.work_dir,
                                       os.path.realpath(os.path.join(STARTUP_DIR, '..')),
                                       conf.file)
    except:
        glidein_dicts_obj.delete_dirs()
        raise

    print "Created glidein '%s'" % conf[u'glidein_name']
    print "Active entries are:"
    for entry in glidein_dicts_obj.active_sub_list:
        print "  %s" % entry
    print "Submit files can be found in %s" % glidein_dicts_obj.main_dicts.work_dir
    print "Log files can be found in %s" % glidein_dicts_obj.main_dicts.log_dir
    print "Support files are in %s" % glidein_dicts_obj.main_dicts.stage_dir
    print "Monitoring files are in %s" % glidein_dicts_obj.main_dicts.monitor_dir


############################################################
#
# S T A R T U P
# 
############################################################

if __name__ == '__main__':
    usage = "create_glidein [-writeback yes|no] [-debug] cfg_fname | -help"
    argv = sys.argv
    writeback = 'yes'
    debug = False
    while len(argv) > 2:
        if argv[1] == '-writeback':
            writeback = argv[2]
            argv = argv[0:1] + argv[3:]
        elif argv[1] == '-debug':
            debug = True
            argv = argv[0:1] + argv[2:]
        else:
            break

    xml = argv[1]
    conf = factoryXmlConfig.parse(xml)

    if not (writeback in ('yes', 'no')):
        print usage
        print ""
        print "-writeback must be yes or no, found '%s'" % writeback
        sys.exit(1)

    try:
        main(conf)
    except RuntimeError, e:
        if debug:
            tb = traceback.format_exception(sys.exc_info()[0], sys.exc_info()[1], sys.exc_info()[2])
            print string.join(tb, '\n')
        print usage
        print ""
        print e
        sys.exit(1)
