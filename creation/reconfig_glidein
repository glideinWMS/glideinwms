#!/usr/bin/env python

#
# Project:
#   glideinWMS
#
# File Version: 
#
# Description:
#  This program updates a glidein factory directory structure
#  based on a configuration file
#

import os
import sys
import logging
import os.path
import subprocess
import tempfile

STARTUP_DIR = sys.path[0]
sys.path.append(os.path.join(STARTUP_DIR,"../.."))

from glideinwms.creation.lib import cgWParams
from glideinwms.creation.lib import cgWDictFile
from glideinwms.creation.lib import cgWConsts
from glideinwms.creation.lib import cWConsts
from glideinwms.creation.lib import cgWCreate
from glideinwms.creation.lib import cgWParamDict
from glideinwms.creation.lib import factoryXmlConfig
from glideinwms.creation.lib import xslt
from glideinwms.factory import glideFactoryMonitorAggregator
from glideinwms.factory import glideFactoryConfig
from glideinwms.lib import logSupport

force_delete=False
fix_rrd = False

class UsageError(Exception): pass
class ReconfigError(Exception): pass


def logReconfig(msg):
    glideinDescript=glideFactoryConfig.GlideinDescript()
    # Set the Log directory 
    logSupport.log_dir = os.path.join(glideinDescript.data['LogDir'], "factory")
    # Configure factory process logging
    process_logs = eval(glideinDescript.data['ProcessLogs'])
    for plog in process_logs:
        if 'ADMIN' in plog['msg_types']:
            logSupport.add_processlog_handler("factoryadmin", 
                logSupport.log_dir, "DEBUG,INFO,WARN,ERR", 
                plog['extension'],
                int(float(plog['max_days'])),
                int(float(plog['min_days'])),
                int(float(plog['max_mbytes'])),
                plog['compression'])
        else:
            logSupport.add_processlog_handler("factoryadmin", 
                logSupport.log_dir, plog['msg_types'], plog['extension'],
                int(float(plog['max_days'])),
                int(float(plog['min_days'])),
                int(float(plog['max_mbytes'])),
                plog['compression'])
    logSupport.log = logging.getLogger("factoryadmin")
    logSupport.log.info("Reconfiguring factory: %s" % msg)


def main(conf, update_scripts, update_def_cfg, comment=""):
    old_glidein_dicts_obj = None
    
    # create dictionaries for new params
    glidein_dicts_obj = cgWParamDict.glideinDicts(conf)

    # load old files
    if os.path.exists(glidein_dicts_obj.main_dicts['glidein'].get_filepath()):
        old_glidein_dicts_obj = cgWParamDict.glideinDicts(conf)
        old_glidein_dicts_obj.load()

    try:
        glidein_dicts_obj.populate(old_glidein_dicts_obj)
    except cgWParamDict.UnconfiguredScheddError, e:
        print e.err_str
        sys.exit(1)

    # merge them together
    if not old_glidein_dicts_obj is None:
        entries = set(glidein_dicts_obj.main_dicts['glidein']['Entries'].split(','))
        old_entries = old_glidein_dicts_obj.main_dicts['glidein']['Entries'].split(',')
        disabled_entries = glidein_dicts_obj.main_dicts.disabled_sub_list
        for entry in old_entries:
            if ((entry) and (entry not in entries) and (entry not in disabled_entries)):
                print "WARNING: entry %s is not found in new xml!" % entry
                if not force_delete:
                    print "Aborting reconfig since this is just too scary."
                    print "Enable -force_delete if you really want to delete it."
                    sys.exit(1)
        
        glidein_dicts_obj.reuse(old_glidein_dicts_obj)
    else:
        # If no old params exist, make sure to create the new directory, (no reuse)
        glidein_dicts_obj.create_dirs(fail_if_exists=False)

    # write to disk
    glidein_dicts_obj.save()
    glidein_dicts_obj.set_readonly(True)

    if update_scripts == 'yes':
        # copy the submit files
        cgWCreate.copy_exe(cgWConsts.STARTUP_FILE, glidein_dicts_obj.main_dicts.work_dir, cgWConsts.WEB_BASE_DIR, True)
        cgWCreate.copy_exe(cgWConsts.LOCAL_START_WRAPPER, glidein_dicts_obj.main_dicts.work_dir, cgWConsts.WEB_BASE_DIR, True)
        print '...Updated the glidein_startup.sh and local_start.sh scripts'

        # copy glidein_startup.sh to the stage area for cloud entries
        cgWCreate.copy_exe(cgWConsts.STARTUP_FILE, glidein_dicts_obj.main_dicts.stage_dir, cgWConsts.WEB_BASE_DIR, True)
        print "...Updated the glidein_startup.sh file in the staging area"

        # copy privsep helper executables
        cgWCreate.copy_exe(cgWConsts.UPDATE_PROXY_FILE, glidein_dicts_obj.main_dicts.work_dir, cgWConsts.WEB_BASE_DIR, True)

    if update_def_cfg == 'yes' or update_scripts == 'yes':
        # recreate the init.d startup file
        # This will never happen in RPM installations (because of the init.d file)
        startup_fname = os.path.join(glidein_dicts_obj.main_dicts.work_dir, cgWConsts.INITD_STARTUP_FILE)
        factory_dir = glidein_dicts_obj.main_dicts.work_dir
        
        # Remove startup file if already exists
        if os.path.exists(os.path.join(factory_dir, startup_fname)):
            os.remove(os.path.join(factory_dir, startup_fname))

        cgWCreate.create_initd_startup(startup_fname,
                                       factory_dir,
                                       os.path.realpath(os.path.join(STARTUP_DIR, '..')),
                                       conf.file)
        print "...Updated the factory_startup script"

        if update_def_cfg == 'yes':
            print "...Updated default config file location to: %s" % conf.file

    print "...Reconfigured glidein '%s' is complete" % conf[u'glidein_name']
    print "...Active entries are:"
    for entry in glidein_dicts_obj.active_sub_list:
        print "     %s"%entry
    print "...Verifying rrd schema"
    if not glideFactoryMonitorAggregator.verifyRRD(fix_rrd):
        if not fix_rrd:
            print "Run with -fix_rrd option to update errors"
            print "WARNING: back up your existing rrds before auto-fixing rrds"
        sys.exit(1)
    print "...Submit files are in %s"%glidein_dicts_obj.main_dicts.work_dir
    if comment:
        logReconfig("Reconfig successful with options update_def_cfg='%s' update_scripts='%s' comment='%s'" % (update_def_cfg, update_scripts, comment))

############################################################
#
# S T A R T U P
# 
############################################################

if __name__ == '__main__':
    exit_code = 0
    usage = "usage: reconfig_glidein { -force_name name -writeback yes|no -update_scripts yes|no -xml xml -update_def_cfg yes|no [-force_delete] [-xslt_plugin_dir xdir] | -help }"
    argv = sys.argv

    if len(argv) == 1:
        print usage
        sys.exit(1)

    if os.geteuid() == 0:
        print "NOTE: Executing reconfig_glidein as user 'root' is not allowed. Use the factory user instead. For rpm based installations, use the 'service gwms-factory <start|stop|reconfig|...>' command to perform gwms-factory operations"

    force_name = None
    writeback = 'no'
    update_scripts = 'no'
    xml = ''
    comment=''
    update_def_cfg = 'no'

    xslt_plugin_dir = os.environ.get('GWMS_XSLT_PLUGIN_DIR', None)

    for i in range(len(argv)):
        if argv[i] == '-fix_rrd':
            fix_rrd = True
        if argv[i] == '-comment':
            comment = "("+argv[i + 1]+")"
        if argv[i] == '-force_name':
            force_name = argv[i + 1]
        if argv[i] == '-writeback':
            writeback = argv[i + 1]
        elif argv[i] == '-force_delete':
            force_delete = True
        if argv[i] == '-update_scripts':
            update_scripts = argv[i + 1]
        if argv[i] == '-xml':
            xml = argv[i + 1]
        if argv[i] == '-xslt_plugin_dir':
            xslt_plugin_dir = argv[i+1]
        if argv[i] == '-update_def_cfg':
            update_def_cfg = argv[i + 1]
        if argv[i] == '-help':
            print usage
            sys.exit(1)

    # conf is of type factoryXmlConfig.Config
    # pylint: disable=maybe-no-member
    conf = factoryXmlConfig.parse(xml)

    try:
        transformed_xmlfile = tempfile.NamedTemporaryFile()
        transformed_xmlfile.write(xslt.xslt_xml(old_xmlfile=xml,
                                  xslt_plugin_dir=xslt_plugin_dir))
        transformed_xmlfile.flush()

        args = [argv[0], transformed_xmlfile.name]

        glidein_name = conf[u'glidein_name']
        if force_name is not None:
            if glidein_name != force_name:
                raise UsageError("This is not a '%s' config file ('%s' found)" % (force_name, glidein_name))

        if not (writeback in ('yes', 'no')):
            raise UsageError("-writeback must be yes or no, found '%s'" % writeback)

        if not (update_def_cfg in ('yes', 'no')):
            raise UsageError("-update_def_cfg must be yes or no, found '%s'" % update_def_cfg)

        try:
            # This is the current running version, saved in the glidein work dir
            submit_dir = conf.get_submit_dir()
            
            main(conf, update_scripts, update_def_cfg, comment=comment)
    
        except RuntimeError, e:
            raise ReconfigError(str(e))

    except ReconfigError, re:
        print re
        exit_code = 1

    except UsageError, ue:
        print usage
        print ""
        print ue
        exit_code = 1

    except RuntimeError, e:
        print e
        exit_code = 1

    sys.exit(exit_code)


